initializing...in file existsfound parsed contentchecking item with name: use std :: any :: TypeId ;checking item with name: use std :: fmt :: Display ;checking item with name: use quote :: { format_ident , IdentFragment , quote , ToTokens } ;checking item with name: use syn :: { DeriveInput , Ident , LitStr , parse_macro_input , Token , token :: Paren } ;checking item with name: use syn :: token :: Type ;checking item with name: use module_macro :: { initializer , module_attr } ;checking item with name: use crate :: test_library :: * ;checking item with name: use crate :: test_library :: test_library_three :: { One , Once , Four } ;checking item with name: use crate :: test_library :: test_library_two :: Ten ;checking item with name: use build_lib :: NewComponent ;checking item with name: use std :: any :: Any ;checking item with name: use std :: sync :: Arc ;checking item with name: use std :: collections :: HashMap ;checking item with name: use std :: ops :: Deref ;checking item with name: use std :: marker :: PhantomData ;checking item with name: include ! (concat ! (env ! ("OUT_DIR") , "/codegen.rs")) ;checking item with name: include ! (concat ! (env ! ("OUT_DIR") , "/spring-knockoff.rs")) ;checking item with name: # [module_attr] # [cfg (springknockoff)] pub mod test_library { pub mod test_library_two ; pub mod test_library_three ; }checking item with name: # [initializer] pub fn do_initializer () { println ! ("hello!") ; }Found initializer on item# [initializer] pub fn do_initializer () { println ! ("hello!") ; }found impl itemwriting itemfnfound attr on main module



Found with module_attr

found inner module

test_library_two

the inner module name is 

test_library

the module module name is 

test_library

parsed inner file and found

use module_macro :: { bean , singleton , autowired } ;

parsed inner file and found

# [derive (Default , Debug)] # [singleton (Once)] pub struct Ten { }

replacing item mod named

test_library_two

found inner module

test_library_three

the inner module name is 

test_library

the module module name is 

test_library

parsed inner file and found

use module_macro :: { bean , singleton , autowired } ;

parsed inner file and found

use std :: sync :: Arc ;

parsed inner file and found

pub trait Found { }

parsed inner file and found

# [singleton ("hello_string")] fn this_one () -> Option < & 'static str > { Some ("hello") }

parsed inner file and found

impl Found for One { }

parsed inner file and found

impl Found for Four { }

parsed inner file and found

impl One { }

parsed inner file and found

# [derive (Default , Debug)] # [singleton (Four)] pub struct Four { # [autowired] four : Arc < One > , two : String , }

parsed inner file and found

# [derive (Default , Debug)] # [singleton (One)] pub struct One { pub two : String }

parsed inner file and found

# [singleton (Once)] # [derive (Default , Debug)] pub struct Once { }

replacing item mod named

test_library_three

here is the finished lib file:

# [module_attr] pub mod test_library { pub mod test_library_two { use module_macro :: { bean , singleton , autowired } ; # [derive (Default , Debug)] # [singleton (Once)] pub struct Ten { } } pub mod test_library_three { use module_macro :: { bean , singleton , autowired } ; use std :: sync :: Arc ; pub trait Found { } # [singleton ("hello_string")] fn this_one () -> Option < & 'static str > { Some ("hello") } impl Found for One { } impl Found for Four { } impl One { } # [derive (Default , Debug)] # [singleton (Four)] pub struct Four { # [autowired] four : Arc < One > , two : String , } # [derive (Default , Debug)] # [singleton (One)] pub struct One { pub two : String } # [singleton (Once)] # [derive (Default , Debug)] pub struct Once { } } }

